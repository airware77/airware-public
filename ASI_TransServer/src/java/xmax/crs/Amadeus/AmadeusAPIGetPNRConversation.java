package xmax.crs.Amadeus;

import APIv2.APIproxy;
import APIv2.AmadeusAPI;

import xmax.crs.Amadeus.AmadeusAPICrs;
import xmax.crs.PNR;
import xmax.crs.GdsResponseException;
import xmax.crs.GnrcParser;
import xmax.crs.GetPNR.PNRItinAirSegment;
import xmax.TranServer.TranServerException;
import xmax.TranServer.GnrcFormat;
import xmax.util.RegExpMatch;
import xmax.util.xml.DOMutil;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.apache.xerces.dom.DocumentImpl;

import java.util.StringTokenizer;

class AmadeusAPIGetPNRConversation
{
  /** 
   ***********************************************************************
   * This method builds the dom query needed to retrieve 
   * a Passenger Name Record (PNR) by Locator, executes the command,
   * and then calls ParsePNR to parse the PNR information from the Reply
   * and populate the PNR object passed.
   *
   * @param aCrs
   *   an <code>AmadeusAPI</code> object
   * @param sLocator
   *   a String generated by the CRS identifying the PNR
   * @param aPNR
   *   a <code>PNR</code> used to store the PNR's information
   * @param aLeaveOpen
   *   setting this flag to true prevents the method from doing an 'ignore'
   *   after retrieving the PNR and thus clearing the Agent Assembly Area (AAA)
   ***********************************************************************
   */
  public static void retrievePNR(final AmadeusAPICrs aCrs, 
                                 final String sLocator,
                                 final PNR aPNR, 
                                 final boolean leaveOpen) throws Exception
    {
    // aCrs.Ignore(); // eliminated during Amadeus Cert ?
    Document domQuery = buildQuery_retrievePNR(sLocator);
    Document domReply = null;
    Element root      = null;
    boolean firstTime = true;

    while(true) {
      domReply = aCrs.connection.sendAndReceive(domQuery);
      root = domReply.getDocumentElement();
      // if we did not get a proper reply, issue an error
      if ( root.getTagName().equals("MessagesOnly_Reply") )
        {
        String sErr = AmadeusAPIParsePNR.readError_MessagesOnly_Reply(domReply);
        // retry retrieving once if we encounter a FINISH OR IGNORE message
        if (sErr.indexOf("FINISH OR IGNORE") >= 0)
          {
          if (firstTime)
            {
            aCrs.Ignore();
            firstTime = false;
            continue;
            }
          else
            throw new GdsResponseException(
                " Warning! possible 'finish or ignore' loop condition: " + sErr);
          }
        else 
          throw new GdsResponseException(" Unable to retrieve PNR: " + sErr);
        }
      else if ( !(root.getTagName().equals("PoweredPNR_PNRReply")) )
        throw new GdsResponseException(
            "Unable to retrieve PNR: unrecognized Amadeus response");
      else
        break;
    }

    // in a test environment we must hard-code remote locators when parsing
    // the itin section in AmadeusAPIParsePNR.scanItinAirSegment
    boolean isTestEnv = 
      Boolean.valueOf(aCrs.getProperty("isTestEnv","false")).booleanValue();
    
    // parse the pnr reply
    AmadeusAPIParsePNR.parsePNR(domReply, aPNR, isTestEnv);

    if (!leaveOpen)
      aCrs.Ignore();
    
    /*
    final String sCommand = "RTW-" + aLocator;
    final String[] CrsResponses = aCRS.getAllHostResponses(sCommand);
    AmadeusParsePNR.parsePNR(CrsResponses,PNRData);
    PNRData.setLocator(aLocator);

    // PNR must return at least two lines of data
    final String sPNRData = PNRData.getPNRData();
    if ( AmadeusParsePNR.isValidPNRData(sPNRData) == false )
      throw new GdsResponseException("Invalid PNR data returned for locator '" + aLocator + "'",sCommand,sPNRData);

    // if LeaveOpen flag is not set, clear any existing state 
    // with an ignore command 
    if ( aLeaveOpen == false )
      aCRS.Ignore();
    */

    } // end retrievePNR

  /**
   ***********************************************************************
   * Retrieves the next Passenger Name Record (PNR) from the given Queue and
   * optionally removes the PNR from the Queue, and/or leaves the PNR open for
   * editing; if the Queue is empty, this method simply returns.
   * <p>
   * This method was implemented through the Amadeus API Cryptic interface, as
   * there was no benefit in using the more structured interface.  This was
   * done by using almost a verbatim copy of the method 
   * {@link AmadeusGetPNRConversation.GetPNRFromQueue}.  As such, this method
   * relies on several of the methods in {@link AmadeusGetPNRConversation}, and
   * {@link AmadeusParsePNR}.</p>
   *
   * @param aQueueName
   *   the name of the Queue from which the PNR is to be retrieved
   * @param aPNR
   *   an empty <code>PNR</code> object in which to store the PNR retrieved
   *   from the queue
   * @param aRemove
   *   indicates that the PNR should be removed from the Queue after retrieval
   * @param aLeaveOpen
   *   indicates that the PNR should be left in the Agent Assembly Area (AAA)
   *   after retrieval, presumably so that it can be modified
   *
   * @see AmadeusGetPNRConversation.GetPNRFromQueue
   * @see AmadeusParsePNR
   ***********************************************************************
   */
  public static void retrieveFromQueue(final AmadeusAPICrs aCrs, 
      final String  aQueueName, final PNR aPNR, 
      final boolean aRemoveFlag, final boolean aLeaveOpen) throws Exception
    {
    aCrs.Ignore();

    // build the xml query string to start a queue using the 'classic'
    // interface
    final String sStartQueue = "<Queue_Start_Query><Queue>" +
                                 aQueueName +
                               "</Queue></Queue_Start_Query>";

    // cryptic queue commands
    //final String PULL_PNR_FROM_QUEUE   = "QS" + aQueueName + ".RTW";
    final String EXIT_QUEUE            = "QI";
    final String REMOVE_PNR_FROM_QUEUE = "QN";

    String sLocator = "";

    try
      {
      // get the PNR data
      String sResp = aCrs.connection.sendAndReceive(sStartQueue);
      Document domReply = DOMutil.stringToDom(sResp);

      Element root = domReply.getDocumentElement();

      if (root.getTagName().equals("MessagesOnly_Reply"))
        {
        String sErr = AmadeusAPIParsePNR.readError_MessagesOnly_Reply(domReply);
        // return silently if queue is empty
        if ( AmadeusAPIGetPNRConversation.isQueueEmpty(sErr) )
          return;
        else
          throw new GdsResponseException(" Unable to read from Queue: " + sErr);
        }
      else if (root.getTagName().equals("PNR_Reply"))
        {
        sLocator = AmadeusAPIParsePNR.getLocator(domReply);
        }
      else
        throw new GdsResponseException(
            "retrieveFromQueue: unrecognized response: " + sResp);
            
      // make sure you can read the locator
      if ( GnrcFormat.IsNull(sLocator) )
        throw new GdsResponseException( 
            "retrieveFromQueue: Unable to extract locator from PNR response: " + sResp);
      else // redisplay so that we can parse the PNR
        redisplayPNR(aCrs,aPNR);

      // if Remove Flag is set, remove the PNR from the Queue
      if ( aRemoveFlag )
        aCrs.sendRecvCryptic(REMOVE_PNR_FROM_QUEUE);
      }
    catch (Exception e) { throw e; }
    finally { aCrs.sendRecvCryptic(EXIT_QUEUE); }

    if ( aLeaveOpen )
      aCrs.LoadPNRIntoAAA(sLocator);
    else
      aCrs.Ignore();

    } // retrievePNRFromQueue


  /** 
   ***********************************************************************
   * This method calls {@link buildQuery_redisplayPNR} to create the query to
   * redisplay the Passenger Name Record (PNR) that is currently in the 
   * Agent Assembly Area (AAA), and then calls {@link
   * AmadeusAPIParsePNR.parsePNR} to parse the PNR returned.
   *
   * @param aCRS
   *  the CRS object providing the Computer Reservation System services
   *
   * @param aPNR
   *  the PNR object in which we store the PNR information extracted
   *
   * @see buildQuery_redisplayPNR
   * @see AmadeusAPIParsePNR.parsePNR
   ***********************************************************************
   */
  public static void redisplayPNR(final AmadeusAPICrs aCRS, final PNR aPNR) 
    throws Exception
    {
    Document domQuery = buildQuery_redisplayPNR();
    Document domReply = aCRS.connection.sendAndReceive(domQuery);
    AmadeusAPIParsePNR.parsePNR(domReply, aPNR);

    Element root = domReply.getDocumentElement();

    // if we did not get a proper reply, issue an error
    if ( root.getTagName().equals("MessagesOnly_Reply") )
      {
      String sErr = AmadeusAPIParsePNR.readError_MessagesOnly_Reply(domReply);
      throw new GdsResponseException("Unable to redisplay PNR: " + sErr);
      }

    else if ( !(root.getTagName().equals("PoweredPNR_PNRReply")) )
      throw new GdsResponseException(
          "Unable to redisplay PNR: unrecognized Amadeus response");
    } // end redisplayPNR

  /**
   ***********************************************************************
   * Checks to see whether the message string returned by performing a cryptic
   * retrieve from Queue through the
   * {@link AmadeusAPICrsconnection.sendRecvCryptic} method indicates that the
   * Queue is empty
   ***********************************************************************
   */
  public static boolean isQueueEmpty(String sResponse)
    {
    if (sResponse.indexOf("DATE RANGE EMPTY") >= 0)
      return(true);
    else
      return(false);

    } // end isQueueEmpty


  /**
   ***********************************************************************
   * Retrieves the PNR identified by the locator, if not null, and the managed
   * block locators for any segments in the PNR that were sold from a NegoSpace
   * Block; if we are in a test environment, the locators are hard-coded to
   * 'TEST-RLR';
   ***********************************************************************
   */
  public static void getNegoSpaceLocators( 
      final AmadeusAPICrs aCrs, final String sLocator, final PNR pnr) throws Exception
    {
    if (pnr.hasData() == false)
      if (GnrcFormat.NotNull(sLocator))
        aCrs.GetPNRAllSegments(sLocator, pnr, true);
      else
        aCrs.GetPNRFromAAA(pnr);

    boolean isTestEnv = 
      Boolean.valueOf(aCrs.getProperty("isTestEnv","false")).booleanValue();

    PNRItinAirSegment[] segs = pnr.getManagedBlockAirSegments();

    String sResponse = "";

    if (isTestEnv == false)
      sResponse = GnrcParser.getCombinedHostResponse(aCrs.getAllHostResponses("RTSVC"));

    for (int i=0; i < segs.length ; i++)
      {
      segs[i].BlockCrsCode = "1A";
      if (isTestEnv == false)
        {
        try {
          readNegoSpaceLocator(sResponse,segs[i]);
          }
        catch (Exception e) {
          segs[i].BlockLocator = xmax.crs.Block.LOCTR_NOT_FOUND;
          }
        }
      else
        segs[i].BlockLocator = "TEST-RLR";
      }
    } // end getManagedBlockLocators

  /**
   ***********************************************************************
   * Given a text response to the Amadeus Cryptic command RTSVC and an air
   * segment, this method extracts the NegoSpace locator matching that segment
   ***********************************************************************
   */
  protected static void readNegoSpaceLocator(
      String sResponse, PNRItinAirSegment airseg) throws Exception
    {
    StringTokenizer tk = new StringTokenizer(sResponse,"\r\n");
    // matches a line such as:
    //  UA 065 Q DENLAX  763 S 
    // where:
    //  [A-Z ]{5} match carrier code
    //  [0-9 ]{6} match flight number
    //  [A-Z] match inventory class
    //  [A-Z ]{6} match city pair
    String FLIGHT_INFO = "[A-Z ]{5}[0-9 ]{6}[A-Z]  [A-Z]{6}";
    boolean foundSegment = false;
    while (tk.hasMoreTokens())
      {
      String sLine = tk.nextToken();
      if (RegExpMatch.matches(sLine,FLIGHT_INFO))
        {
        int i=0;
        String sCarrier = sLine.substring(i,i+=5).trim();
        String sFlight  = sLine.substring(i,i+=4).trim();
        String sInvCls  = sLine.substring(i,i+=3).trim();
        i+=2; // 2 spaces
        String sDepCity = sLine.substring(i,i+=3).trim();
        String sArrCity = sLine.substring(i,i+=3).trim();

        if (airseg.Carrier.equals(sCarrier) &&
            airseg.FlightNumber == Integer.parseInt(sFlight) &&
            airseg.InventoryClass.equals(sInvCls) &&
            airseg.DepartureCityCode.equals(sDepCity) &&
            airseg.ArrivalCityCode.equals(sArrCity))
          {
          foundSegment = true;
          }
        }

      if (foundSegment && sLine.indexOf("TOUR NAME") >= 0)
        {
        int i = sLine.indexOf("RLOC:")+5;
        airseg.BlockLocator = sLine.substring(i,i+7).trim();
        break;
        }
      }

    if (GnrcFormat.IsNull(airseg.BlockLocator))
      throw new Exception(
          "Unable to read NegoSpace Locator for segment: " + 
           airseg.Carrier + airseg.FlightNumber);
    } // end readNegoSpaceLocators


  /**
   ***********************************************************************
   * This method generates a DOM PoweredPNR_Retrieve query to retrieve
   * a Passenger Name Record (PNR) by Locator
   ***********************************************************************
   */
  public static Document buildQuery_retrievePNR(String sLocator)
    {
    DocumentImpl domQuery = new DocumentImpl();
    Element root, el1, el11, el111;

    root = domQuery.createElement("PoweredPNR_Retrieve");

    el1 = domQuery.createElement("settings");
    root.appendChild(el1);

    el11 = domQuery.createElement("options");
    el1.appendChild(el11);
    // retrieves Remote Locator Records (RLRs)
    DOMutil.addTextElement(domQuery, el11,"optionCode","53"); 

    el1  = domQuery.createElement("retrievalFacts");
    el11 = domQuery.createElement("retrieve");
    // '2' stands for 'Retrieve By Locator'
    DOMutil.addTextElement(domQuery, el11, "type", "2");
    el1.appendChild(el11);

    el11  = domQuery.createElement("reservationOrProfileIdentifier");
    el111 = domQuery.createElement("reservation");
    DOMutil.addTextElement(domQuery, el111, "controlNumber", sLocator);
    el11.appendChild(el111);
    el1.appendChild(el11);
    root.appendChild(el1);
    domQuery.appendChild(root);

    return(domQuery);
    } // end buildQuery_retrievePNR

  /**
   ***********************************************************************
   * This method generates a DOM PoweredPNR_Retrieve query to retrieve
   * the Passenger Name Record (PNR) that is currently in the 
   * Agent Assembly Area (AAA).
   ***********************************************************************
   */
  public static Document buildQuery_redisplayPNR()
    {
    DocumentImpl domQuery = new DocumentImpl();
    Element root, el1, el11, el111;

    root = domQuery.createElement("PoweredPNR_Retrieve");

    el1  = domQuery.createElement("retrievalFacts");
    el11 = domQuery.createElement("retrieve");
    // '1' stands for 'Redisplay'
    DOMutil.addTextElement(domQuery, el11, "type", "1");
    el1.appendChild(el11);
    root.appendChild(el1);
    domQuery.appendChild(root);

    return(domQuery);

    } // end buildQuery_retrievePNR

} // end AmadeusAPIGetPNRConversation
