
//Title:        CRS Test Project
//Version:
//Copyright:    Copyright (c) 1999
//Author:       David Fairchild
//Company:      XMAX Corp
//Description:  This class describes an individual name on a PNR

package xmax.crs.GetPNR;

import xmax.TranServer.GnrcFormat;
import java.io.Serializable;

/**
 ***********************************************************************
 * This class is used to store information for a single passenger.
 *
 * @author   David Fairchild
 * @version  1.x Copyright (c) 1999
 *
 * @see PNRFamilyElement
 * @see PNR
 ***********************************************************************
 */
public class PNRNameElement implements Serializable
{
 public String FirstName;
 public String MiddleName;
 public String LastName;
 public String Title;
 public int NumSeats;

 /**
  * This is a unique passenger identifier that is generated by Airware and
	* appended to the passenger name at the time that Airware builds
	* the Passenger Name Record (PNR).
  */
 private String PassengerID;

 /**
  * This field is used in the event that a Computer Reservation System uses an
  * internal passenger identifier (such as is the case for the Amadeus API)
  */
 public String CrsPsgrID;

 /**
  * This is the line number of the passenger element on a cryptic terminal;
  * In Amadeus, it is necessary to store the LineNumber for faring operations,
  * which use the newer API
  */
 public String CrsLineNumber;

 /** the Passenger Type Code for the passenger  */
 public String PTC;
 public int Age;
 public long BirthDate;

 /** the name of the infant accompanying the passenger, if any */
 public String InfantName;

 /** the infant date of birth, if any */
 public String InfantDOB;

 public static final String PTC_ADULT    = "ADT";
 public static final String PTC_CHILD    = "CHD";
 public static final String PTC_INFANT   = "INF";
 public static final String PTC_SENIOR   = "SNR";
 public static final String PTC_MILITARY = "MIL";

 /** returns true if all fields match */
 public boolean equals(final PNRNameElement aName)
   {
   if ( (aName instanceof PNRNameElement) == false )
     return(false);

   // compare name fields
   if ( cmpStr(aName.PassengerID,this.PassengerID) == false )
     return(false);

   if ( cmpStr(aName.CrsPsgrID,this.CrsPsgrID) == false )
     return(false);

   if ( cmpStr(aName.FirstName,this.FirstName) == false )
     return(false);

   if ( cmpStr(aName.MiddleName,this.MiddleName) == false )
     return(false);

   if ( cmpStr(aName.LastName,this.LastName) == false )
     return(false);

   if ( cmpStr(aName.Title,this.Title) == false )
     return(false);

   if ( cmpStr(aName.PTC,this.PTC) == false )
     return(false);

   if ( aName.NumSeats != this.NumSeats )
     return(false);

   return(true);
   }

  /**
   ***********************************************************************
   * Returns the passenger ID of the passenger associated with this remark,
   * including any Group ID
   ***********************************************************************
   */
  public String getPassengerID()
    {
    if (GnrcFormat.IsNull(PassengerID))
      return "";
    else
      return PassengerID;
    } // end getPsgrID

  /** Sets the PassengerID of the passenger associated with this remark */
  public void setPassengerID(String id) { PassengerID = id; }

  /**
   ***********************************************************************
   * Returns the first 9 characters of the ID of the passenger associated with
   * this remark; this is the canonical Airware ID and excludes any additional
   * identifier such as a Group ID; returns the empty string if the passenger
   * ID is less than 9 characters, as this is in invalid Passenger ID
   ***********************************************************************
   */
  public String getStrictPassengerID()
    {
    if (GnrcFormat.IsNull(PassengerID) || PassengerID.length() < 9)
      return "";
    else
      return PassengerID.substring(0,9);
    }

  /**
   ***********************************************************************
   * compares the first 9 characters of this name's PassengerID with the first
   * 9 characters of the PassengerID of the name provided, and returns true if
   * they match
   ***********************************************************************
   */
  public boolean hasSamePsgrID(PNRNameElement name)
    {
    if (this.getPassengerID().length() < 9 || name.getPassengerID().length() < 9)
      return this.getPassengerID().equals(name.getPassengerID());
    else
      return this.getPassengerID().substring(0,9).equals(
            name.getPassengerID().substring(0,9));
    } // end hasSamePsgrID

  /**
   ***********************************************************************
   * compares the first 9 characters of this name's PassengerID with the first
   * 9 characters of the PassengerID provided, and returns true if
   * they match
   ***********************************************************************
   */
  public boolean hasPassengerID(String sPsgrID)
    {
    if (sPsgrID == null)
      sPsgrID = "";

    if (this.getPassengerID().length() < 9 || sPsgrID.length() < 9)
      return this.getPassengerID().equals(sPsgrID);
    else
      return this.getPassengerID().substring(0,9).equals(sPsgrID.substring(0,9));
    } // end hasPassengerID

 /**
  ***********************************************************************
  * returns true if this name element represents an 'accompanying' infant:
  * the name element contains an infant Passenger Type Code and does not occupy any
  * seats
  ***********************************************************************
  */
 public boolean isInfant()
   {
   if ( PNRNameElement.PTC_INFANT.equals(PTC) && (NumSeats == 0) )
     return(true);
   else
     return(false);
   }

 /** true if the name element contains a Child Passenger Type Code */
 public boolean isChild()
   {
   if ( PNRNameElement.PTC_CHILD.equals(PTC) )
     return(true);
   else
     return(false);
   }


 /** true if name element is neither a child nor an infant */
 public boolean isAdult()
   {
   if ( isChild() || isInfant() )
     return(false);
   else
     return(true);
   }

 /** concatenates the title, first name and last name, separated by spaces */
 public String getFullName()
   {
   final StringBuffer sFullName = new StringBuffer();

   // set the title
   if ( GnrcFormat.NotNull(Title) )
     sFullName.append(Title);

   // append the first name
   if ( GnrcFormat.NotNull(FirstName) )
     {
     if ( sFullName.length() > 0 )
       sFullName.append(" ");

     sFullName.append(FirstName);
     }

   // append the last name
   if ( GnrcFormat.NotNull(LastName) )
     {
     if ( sFullName.length() > 0 )
       sFullName.append(" ");

     sFullName.append(LastName);
     }

   return( sFullName.toString() );
   }

 /** checks whether two strings match */
 private boolean cmpStr(final String aStr1, final String aStr2)
   {
   if ( GnrcFormat.NotNull(aStr1) && GnrcFormat.NotNull(aStr2) )
     return( aStr1.equals(aStr2) );
   else if ( GnrcFormat.IsNull(aStr1) && GnrcFormat.IsNull(aStr2) )
     return(true);
   else
     return(false);
   }

  /** returns {@link #getFullName} */
  public String toString()
    {
    return( getFullName() );
    }


}
